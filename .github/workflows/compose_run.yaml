name: docker compose build and run

on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string
      tag:
        required: true
        type: string
      code_coverage:
        required: false
        type: boolean
        default: false
      cmd:
        required: true
        type: string
      algolia:
        required: false
        type: boolean
        default: false
    secrets:
      dockerhub_user:
        required: true
      dockerhub_pass:
        required: true
env:
  TAG: ${{ inputs.tag }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  # https://github.com/actions/runner/issues/409
  ALGOLIA_SUPPLIERS_INDEX_NAME_X: ${{ inputs.algolia && format('ci_{0}_{1}_{2}_supps', inputs.tag, github.run_number, github.job) || '' }}
  ALGOLIA_MOMENTS_INDEX_NAME_X:   ${{ inputs.algolia && format('ci_{0}_{1}_{2}_momes', inputs.tag, github.run_number, github.job) || '' }}
  ALGOLIA_APPLICATION:    ${{ inputs.algolia && secrets.ALGOLIA_APPLICATION    || '' }}
  ALGOLIA_SEARCH_API_KEY: ${{ inputs.algolia && secrets.ALGOLIA_SEARCH_API_KEY || '' }}
  ALGOLIA_WRITE_API_KEY:  ${{ inputs.algolia && secrets.ALGOLIA_WRITE_API_KEY  || '' }}

jobs:
  compose_run:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1

    - name: setup
      run: |
        expected_services=$(ruby -e "require 'yaml'; print YAML.load_file('docker-compose.test.yml')['services'].count")
        echo "expected_services: $expected_services"

        docker login -u ${{ secrets.dockerhub_user }} -p ${{ secrets.dockerhub_pass }}
        docker-compose -f docker-compose.test.yml pull 2>&1 | grep -v -E '^Pulling .*\.\. (extracting|downloading) '
        docker-compose -f docker-compose.test.yml up -d
        docker-compose -f docker-compose.test.yml exec -T ${{ inputs.application-name }} bin/rails db:drop db:create db:test:prepare
        sleep 5
        # wait for all services to be started
        echo "wait for all services to be started"
        while :
        do
        SERVICES=$(docker-compose -f docker-compose.test.yml ps)
        if echo $SERVICES | grep '(health: starting)' >> /dev/null; then
            echo "waiting for services to start ..."
            echo
            echo "$SERVICES" | grep '(health: starting)'
            sleep 2
        else
            echo "services started"
            echo "$SERVICES"
            break
        fi
        done

        # check if all services are running
        RUNNING=$(docker-compose -f docker-compose.test.yml ps --services --filter "status=running" | wc -l)
        if [ "$RUNNING" != "$expected_services" ]; then echo "not all services are running"; docker-compose -f docker-compose.test.yml logs; exit 1; fi

        # check if the app is healty
        STATUS=$(docker inspect --format "{{.State.Health.Status}}" $(docker-compose -f docker-compose.test.yml ps -q ${{ inputs.application-name }} ))
        if [ "$STATUS" != "healthy" ]; then echo "${{ inputs.application-name }} is not healthy"; docker-compose -f docker-compose.test.yml ps; exit 1; fi

    - name: Create Algolia index
      if: ${{ inputs.algolia }}
      run: |
        env | grep = | sort | grep -i algolia
        echo ---------
        env | grep = | sort
        echo ./bin/ci_compose exec rake algolia:create:all

    - name: Run command
      if: ${{ !inputs.code_coverage }}
      run: |
        docker-compose -f docker-compose.test.yml exec -T ${{ inputs.application-name }} ${{ inputs.cmd}}

    - name: Run command with code coverage
      if: ${{ inputs.code_coverage }}
      run: |
        # Aaaa! This is the same as: "Guys! Here is the root password to our testing machine. Please, run whatever you want"
        # Can we download that file, review it, and then use our local copy?
        ci_env=`bash <(curl -s https://codecov.io/env)`
        docker-compose -f docker-compose.test.yml exec -T -e CI=true $ci_env ${{ inputs.application-name }} ${{ inputs.cmd}}

    - name: Remove Algolia index (flaky!)
      if: ${{ inputs.algolia }}
      run: |
        env | grep = | sort | grep -i algolia
        echo ---------
        env | grep = | sort
        echo ./bin/ci_compose exec rake algolia:remove:all || true

    - name: Stop containers
      if: always()
      run: docker-compose -f docker-compose.test.yml down
